// Problem12-Highly divisible triangular number
/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?  */



object Euler12 extends App {
def factor(number:Long):List[Long] = {
  val range = (2L to math.sqrt(number).toLong) // It gives you the square root values of given number
  val Nvalues = range.find(n => number % n == 0 ) // (Find return the value in term of Some(value)
  Nvalues match {
    case Some(d) => d :: factor(number / d)
    case None => List(number)
  }
}
def factCount(num:Long):Int ={
  factor(num).groupBy(identity).map(_._2.length +1 ).product
}
def findTriangle(x:Int):Int ={
  (1 to x).sum
}
 val triangleNumber = Iterator.from(1).map(findTriangle(_))
println(triangleNumber.find(factCount(_) > 500 )) 
}
